//TODO: This is severely outdated.

//
This is the alpha language spec for HTA.
Nothing here is final and info may be outdated.

The compiler is currently missing many safety checks that will be added in the future.

Compiling libraries that can be linked in later is currently not supported.
Importing dlls/other libs to add more call functions is currently not supported.
//

The current goal of HTA is to make an assembly language that uses a runtime
and that has the compiler do safety checks.

File Types:
Programming file: .ha
Binary file     : .hab
Snapshot file   : .hasnap //TODO This may be dropped.

Processing Order:
    - Remove line comments.
    - Remove block comments.
    - Parse and apply pre-processors.

    - Import other files.
    - Parse and apply their pre-processors.

    - Parse and compile tags and instructions.
    - Check if links are all correct.

//TODO Maybe?
Entry:
A program's entry point starts at the "ENTRY:" tag.
The entry file also doubles has the project file.

Pre-Processors:
Pre-Processors start with a #. They must be on their own line, and comments can only come after all values are defined.
  - BUILD [ARG VALUES]:
  Entry file only!
    - binary_name VALUE :: main :: Sets the name of the compiled binary. :: #
  - INFO [ARG VALUES]:
  Entry file only!
  Defines certain info about a HTA program. Not required.
    - name    VALUE  :: main  :: Sets the name of the program.     :: #INFO name I'm a name!
    - authors VALUES :: none  :: Sets the authors of the program.  :: #INFO authors HT, AA
    - version VALUE  :: 1.0.0 :: Sets the version of the program.  :: #INFO version 1.0.0
    - website VALUE  :: none  :: Sets the website of the program.  :: #INFO website harmless.tech                     (https:// is added by the compiler)
    - git     VALUE  :: none  :: Sets the git repo of the program. :: #INFO git github.com/harmless-tech/HT-Assembly  (https:// is added by the compiler)
    - license VALUES :: none  :: Sets the license of the program.  :: #INFO license MIT
  - REQUIRE [ARG VALUES]:
  Entry file only!
  Imposes requirements on the HTA file. Not required, but highly suggested.
    - hta_version VERSION MAJOR.MINOR.PATCH :: COMPILER_VERSION :: Sets the required or greater HTA version to compile this program. :: #REQUIRE hta_version 0.0.1
  - IMPORT FILE_NAME :: NO DEFAULT :: Tells the compiler to compile another file from which elements are required from. Makes it accessible to the whole project. :: #IMPORT structs.ha OR #IMPORT add.ha
  Entry file only!
  - NAMESPACE NAME :: NAME_OF_FILE :: Sets the namespace to which all tags and vars in the file will have. :: #NAMESPACE ht
  This would add the namespace onto the tags and vars in the file. This allows for them to be accessed from other files.
  - DEFINE [NAME VALUES]
    - name VALUES :: none :: Replaces every instance of name with VALUES after it is defined. (NOT RECOMMEND) This can cause a lot of UB. :: #DEFINE HELLO_STR "Hello!"

//TODO Should int and uint be 64 bit or 32 bit?
Builtin Types:
char, string, int8, int16, int32 (int), int64, int128, uint8 (byte), uint16, uint32 (uint), uint64, uint128, float32, float64 (float), boolean //, object, void. (Not in m1)
chr , str   , i8  , i16  , i32 or int , i64  , i128  , u8 or byte  , u16   , u32 or uint  , u64   , u128   , f32    , f64 or float   , bool    //, obj   , void. (Not in m1)
All builtin types can be cast to each other.
All types use big endian.
If a type being casted is bigger then the value can hold, then the value will be reduced to the largest possible value.

Registers:
There are only three registers for HTA. Registers start out has 0_u64.
  - $0 :: Op register 0   :: Read/Write
  - $1 :: Op register 1   :: Read/Write
  - $2 :: Return register :: The return register is the default register where all operations are return to and where several commands read from.
//TODO Add more registers that are just for storing/reading data?

Structs:
//TODO Not in milestone/mark 1/m1.

Tags:
Allows a program to jump to that location. Must be on their own line.
  - TAG_NAME:

Commands:
  - alloc NAME TYPE DATA(OPTIONAL)  :: Allocates a variable of a certain type. Variables can never be null.
  - dealloc NAME                    :: DeAllocates a variable. If the variable does not exist then nothing happens.
  - setvar NAME DATA                :: Sets a variable to the inserted data. (Data must match variable type.)
  - regvar NAME                     :: Takes the return register and places it into a variable.
  - setreg REG TYPE DATA(OPTIONAL)  :: Sets a register to the inserted data.
  - varreg NAME REG                 ::
  - cpyreg REG REG                  ::
  - op OP                           ::
  - jmp TAG                         :: Jumps if $2 is a true value.
  - pushjmp TAG                     :: Jumps if $2 is a true value. Saves the jmp point.
  - popjmp                          :: Pops a jmp. Only happens if there is a jmp in the stack.
  - cast NEW_TYPE                   :: Casts $0 to the new type and puts it into $2.
  - call NATIVE_NAME NATIVE_ARGS    :: NATIVE_ARGS does nothing in m1. For now just passes the register values. Puts something in the return register, if it wants to.
  - exit INT(OPTIONAL)              :: Exits the program with a return code. If there is no return code, exits the program using $2.
  - assert OPTIONAL_ARG             :: Asserts the return register is equal to the OPTIONAL_ARG, or asserts that the return register is true. Only in debug builds.


Operations:
  - Logic: !, &&, ||
  - Arith: +, -, *, /, %, ++, --
  - Rel: ==, !=, >, <, >=, <=
  - BitWise: &, |, ^, ~, << u64, >> u64 // u64 defaults to 1. //TODO Bitwise not in m1.

Natives: //TODO Not in m1.
Natives will be loaded using dynamic libraries. All loaded natives must have their own namespace.
Their namespace can conflict with the namespace of the HTA program.

//TODO Complete.
//TODO Move to better format.
//TODO This needs a rewrite.

//
This is the alpha language spec for HTA.
Nothing here is final and info may be outdated.

Compiling libraries that can be linked in later is currently not supported.
Importing dlls/other libs to add more syscall functions is currently not supported.
//

There is a maximum to the amount of lines a program can have, but I don't know it.

File Types:
Programming file: .ha
Binary file     : .hab
Snapshot file   : .hasnap
Exe file        : .hae //TODO Still don't know how a exe will work. (Or if there will even be one)

//TODO Maybe?
Entry:
A program's entry point starts at the "ENTRY:" tag.

Hash Processor:
Hash Processors start with a #. They must be on their own line, and comments can only come after all values are defined.
  - META [ARG VALUES]:                                  //TODO Struct info.
  Defines certain info about a HTA program. Not required.
    - name    VALUES :: main  :: Sets the name of the program.     :: #META name I'm a name!
    - authors VALUES :: none  :: Sets the authors of the program.  :: #META authors HT AA
    - version VALUE  :: 1.0.0 :: Sets the version of the program.  :: #META version 1.0.0
    - website VALUE  :: none  :: Sets the website of the program.  :: #INFO website https://harmless.tech
    - git     VALUE  :: none  :: Sets the git repo of the program. :: #INFO git https://github.com/harmless-tech/HT-Assembly
    - license VALUES :: none  :: Sets the license of the program.  :: #INFO license MIT
  - REQUIRE [ARG VALUES]:
  Imposes requirements on the HTA file. Not required, but highly suggested.
    - hta_version VERSION COMPARE[greater, greater_equal, equal] :: COMPILER_VERSION greater_equal :: Sets the required HTA version to run/compile this program. :: #REQUIRE hta_version 0.0.1 greater
    - file_type TYPES[assembly, structs]                         :: assembly structs               :: Sets the file to only allow certain things.                :: #REQUIRE file_type assembly
    - semicolons BOOLEAN                                         :: false                          :: Forces semicolons to be used at the end of code lines.     :: #REQUIRE semicolons true
  - NAMESPACE NAME :: NAME_OF_FILE :: Sets the namespace to which all tags and vars in the file will have. :: #NAMESPACE ht
  This would add the namespace onto the tags and vars in the file. This allows for them to be accessed from other files.
  - IMPORT LIB_NAME :: NO DEFAULT :: Tells the runtime to use a library to allow for more syscalls. :: #IMPORT more_syscalls //TODO Not supported currently.
  - IMPORT FILE_NAME :: NO DEFAULT :: Tells the compiler to compile another file from which elements are required from. :: #IMPORT structs.has OR #IMPORT add.ha
  This allows the compiler to discover additional files to compile and link in.
  - DEFINE NAME ARG :: Finds all instances in the file where there is a NAME and replaces it with ARG.
  Not really suggested has it could cause serious problems.

Builtin Types:
char, string, int8, int16, int32 (int), int64, int128, uint8 (byte), uint16, uint32 (uint), uint64, uint128, float32, float64 (float), boolean //, object, void. (Not in m1)
chr , str   , i8  , i16  , i32 or int , i64  , i128  , u8 or byte  , u16   , u32 or uint  , u64   , u128   , f32    , f64 or float   , bool    //, obj   , void. (Not in m1)
All builtin types can be cast to each other.
All types use big endian.

Registers:
There are only three registers for HTA.
  - $0 :: Op register 0   :: Read/Write
  - $1 :: Op register 1   :: Read/Write
  - $2 :: Return register :: The return register is the default register where all operations are return to and where several commands read from.
//TODO Add more registers that are just for storing/reading data?

Structs:
//TODO Not in milestone/mark 1/m1.

Tags:
Allows a program to jump to that location.
  - TAG_NAME:

Commands:
  - alloc NAME TYPE DATA(OPTIONAL)  ::
  - setvar NAME DATA                ::
  - regvar NAME                     ::
  - setreg REG TYPE DATA(OPTIONAL)  ::
  - varreg NAME REG                 ::
  - cpyreg REG REG                  ::
  - op OP                           ::
  - jmp TAG                         :: Jumps if $2 is a true value.
  - pushjmp TAG                     :: Jumps if $2 is a true value. Saves the jmp point.
  - popjmp                          :: Pops a jmp. Only happens if there is a jmp in the stack.
  - cast NEW_TYPE                   :: Casts $0 to the new type and puts it into $2.
  - call NATIVE_NAME NATIVE_ARGS    :: NATIVE_ARGS does nothing in m1. For now just passes the register values. Puts something in the return register, if it wants to.
  - exit INT(OPTIONAL)              :: Exits the program with a return code. If there is no return code, exits the program using $2.
  - assert OPTIONAL_ARG             :: Asserts the return register is equal to the OPTIONAL_ARG, or asserts that the return register is true. Only in debug builds.


Operations:
  - Logic: !, &&, ||
  - Arith: +, -, *, /, %, ++, --
  - Rel: ==, !=, >, <, >=, <=
  - BitWise: &, |, ^, ~, << u64, >> u64 // u64 defaults to 1. //TODO Bitwise not in m1.

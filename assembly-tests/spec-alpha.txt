Spec Version: 0.0.1-alpha

//
This is the alpha language spec for HTA.
Nothing here is final and info may be outdated.
//

File Types:
Programming file: .hta
Binary file     : .hab

Processing Order:
    - Remove line comments.
    - Remove block comments.
    - Parse and apply pre-processors.

    - Import other files.
    - Parse and apply their pre-processors.

    - Parse and compile tags and instructions.
    - Check if links are all correct.

Entry:
The file passed into the compiler will be the entry file and the runtime will start at the first instruction.

Pre-Processor:
Starts with # and must be on their own line. (Comments can come after)
    - INFO [TAG] [VALUE] :: Allows info to be added to the program.
        - name    :: Name of the program. (And maybe the output file)
        - authors :: Authors of the program. (Split using comma-space)
        - version :: Program version.
        - website :: Website of the program. (https:// will be applied to the front)
        - git     :: Repo of the program. (https:// will be applied to the front)
        - license :: Program license.
    - REQUIRE [INTEGRATION_NAME] :: Makes sure the compiler and runtime are using this integration.
    - PULL [FILE] :: Pulls the file into the program. Does not block repeating files and will insert them on whatever line this is on.

Builtin Types:
char, string, int8, int16, int32, int64 (int), int128, uint8 (byte), uint16, uint32, uint64 (uint), uint128, float32, float64 (float), boolean
chr , str   , i8  , i16  , i32  , i64 or int , i128  , u8 or byte  , u16   , u32   , u64 or unit  , u128   , f32    , f64 or float   , bool
All builtin types can be cast to each other.

Registers:
There are only three registers for HTA. Registers start out has 0_u64.
    - $0 :: Op register 0   :: Read/Write
    - $1 :: Op register 1   :: Read/Write
    - $2 :: Return register :: The return register is the default register where all operations are return to and where several commands read from.
    - $3 :: Op register 3   :: Read/Write
    - $4 :: Op register 4   :: Read/Write
    - $5 :: Op register 5   :: Read/Write
    - $6 :: Op register 6   :: Read/Write
    - $7 :: Op register 7   :: Read/Write
    - $8 :: Op register 8   :: Read/Write
    - $9 :: Op register 9   :: Read/Write

Tags:
Allows a program to jump to that location.
    - TAG_NAME:

Commands:
    - alloc NAME TYPE DATA(OPTIONAL)  :: Allocates a variable of a certain type. Variables can never be null.
    - dealloc NAME                    :: DeAllocates a variable. If the variable does not exist then nothing happens.
    - setvar NAME DATA                :: Sets a variable to the inserted data. (Data must match variable type.)
    - regvar REG NAME                 :: Takes the register and places it into a variable.
    - setreg REG TYPE DATA(OPTIONAL)  :: Sets a register to the inserted data.
    - varreg NAME REG                 :: Takes the variable and places it into a register.
    - cpyreg REG REG                  :: Copies a register to a register.
    - op OP                           :: Does an operation on $0 and $1.
    - jmp TAG                         :: Jumps if $2 is a true value.
    - pushjmp TAG                     :: Jumps if $2 is a true value. Pushes jmp to stack.
    - popjmp                          :: Pops a jmp. Only happens if there is a jmp in the stack.
    - cast NEW_TYPE                   :: Casts $0 to the new type and puts it into $2.
    - call FUNCTION FUNCTION_ARGS     :: Calls an 'external' function.
    - exit INT(OPTIONAL)              :: Exits the program with a return code. If there is no return code, exits the program using value in $2.
    - assert OPTIONAL_ARG             :: Asserts the return register is equal to the OPTIONAL_ARG, or asserts that the return register is true. Only in debug builds.

Operations:
    - Logic: !, &&, ||
    - Arith: +, -, *, /, %, ++, --
    - Rel: ==, !=, >, <, >=, <=
    - BitWise: &, |, ^, ~, << $1, >> $1

Integrations:
Integrations allow more instructions or functions to be added.
